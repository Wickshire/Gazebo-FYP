<?xml version='1.0'?>
<robot name="fyp_robot" xmlns:xacro="http://ros.org/wiki/xacro">
<!-- ixx ixy ixz
     ixy iyy iyz
     ixz iyz izz -->

  <xacro:property name="base_xy" value="0.5" />
  <xacro:property name="b_base_z" value="0.3" />
  <xacro:property name="t_base_z" value="0.5" />
  <xacro:property name="wheeldiam" value="0.2" />
  <xacro:property name="casterradi" value="0.06" />
  <xacro:property name="wheellength" value="0.05" />
  <xacro:property name="pi" value="3.1415" />
  <xacro:property name="caster_mass" value="1" />
  <xacro:property name="wheel_mass" value="5" />
  <xacro:property name="base_mass" value="10" />

  <xacro:property name="base_xy2" value="${base_xy*base_xy}" />

  <material name="blue">
    <color rgba="0 0 0.8 1"/>
  </material>

  <material name="black">
    <color rgba="0 0 0 1"/>
  </material>

  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>

  <xacro:macro name="default_inertial" params="mass">
    <inertial>
      <mass value="${mass}" />
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
    </inertial>
  </xacro:macro>
  <xacro:macro name="cuboid_inertial" params="mass height"> <!--solid cuboid macro-->
    <inertial>
      <mass value="${mass}" />
      <inertia ixx="${(1/12)*mass*(height*height+base_xy2)}" ixy="0.0" ixz="0.0" iyy="${(1/12)*mass*(base_xy2*2)}" iyz="0.0" izz="${(1/12)*mass*(base_xy2+height*height)}" />
    </inertial>
  </xacro:macro>
  <xacro:macro name="sphere_inertial" params="mass height radius"> <!--solid sphere macro-->
    <inertial>
      <mass value="${mass}" />
      <inertia ixx="${(2/5)*mass*radius*radius}" ixy="0.0" ixz="0.0" iyy="${(2/5)*mass*radius*radius}}" iyz="0.0" izz="${(2/5)*mass*radius*radius}" />
    </inertial>
  </xacro:macro>

<!-- Add the rectangular base -->
  <link name="base_link">
    <visual>
      <geometry>
        <box size="${base_xy} ${base_xy} ${b_base_z}"/> <!-- 0.5 x 0.5 x 1.0 -->
      </geometry> 
      <material name="blue"/>
    </visual>
    <collision>
      <geometry>
        <box size="${base_xy} ${base_xy} ${b_base_z}"/> <!-- 0.5 x 0.5 x 1.0 -->
      </geometry>
    </collision>
    <xacro:cuboid_inertial mass="${base_mass}" height="${b_base_z}"/>
  </link>

<!-- add caster to each corner of the robot using a macro-->
  <xacro:macro name="caster" params="suffix prefix reflect1 reflect2">
    <link name="caster_${suffix}_${prefix}">
      <visual>
        <geometry>
          <sphere radius="${casterradi}"/>
        </geometry>
        <material name="white"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
      </visual>
      <collision>
       <geometry>
          <sphere radius="${casterradi}"/>
        </geometry>
        <origin xyz="0 0 0" rpy="0 0 0"/>
      </collision>
      <xacro:default_inertial mass="${caster_mass}"/>
    </link>
    <joint name="caster_${suffix}_${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="caster_${suffix}_${prefix}"/>
      <origin xyz="${0.19*reflect1} ${0.19*reflect2} -0.15" rpy="0 0 0"/>
    </joint>
    <!-- This block provides the simulator (Gazebo) with information on a few additional physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
    <gazebo reference="caster_${suffix}_${prefix}"> <!-- link name-->
      <mu1 value="0.1"/>
      <mu2 value="0.1"/>
      <kp value="10000000.0" />
      <kd value="1.0" />
      <material>Gazebo/Grey</material>
    </gazebo>
  <!-- This block connects the caster joint to an actuator (motor), which informs both simulation and visualization of the robot -->
  <transmission name="caster_${suffix}_${prefix}_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="$caster_${suffix}_${prefix}_wheel_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
    <joint name="caster_${suffix}_${prefix}_joint">
      <hardwareInterface>VelocityJointInterface</hardwareInterface>
    </joint>
  </transmission>
  </xacro:macro> 
<!-- end of creating caster macro-->
  <xacro:caster suffix="front" prefix="left" reflect1="1" reflect2="1" />
  <xacro:caster suffix="front" prefix="right" reflect1="1" reflect2="-1" />
  <xacro:caster suffix="back" prefix="left" reflect1="-1" reflect2="1" />
  <xacro:caster suffix="back" prefix="right" reflect1="-1" reflect2="-1" />


<!-- add left & right wheels to the robot -->
  <xacro:macro name="wheels" params="prefix reflect">
    <link name="${prefix}_wheel">
      <visual>
        <geometry>
          <cylinder length="${wheellength}" radius="${wheeldiam/2}"/>
        </geometry>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
      </visual>
      <collision>
       <geometry>
          <cylinder length="${wheellength}" radius="${wheeldiam/2}"/>
        </geometry>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
      </collision>
      <xacro:default_inertial mass="${wheel_mass}"/>
    </link>
    <joint name="${prefix}_wheel_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_wheel"/>
        <origin xyz="0 ${0.225*reflect} -0.115" rpy="0 0 0"/>
    </joint>
    <!-- This block provides the simulator (Gazebo) with information on a few additional physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
    <gazebo reference="${prefix}_wheel"> <!-- link name-->
      <mu1 value="200.0"/>
      <mu2 value="100.0"/>
      <kp value="10000000.0" />
      <kd value="1.0" />
      <material>Gazebo/Grey</material>
    </gazebo>
    <!-- This block connects the wheel joint to an actuator (motor), which informs both simulation and visualization of the robot -->
  <transmission name="${prefix}_wheel_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="${prefix}_wheel_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
    <joint name="${prefix}_wheel_joint">
      <hardwareInterface>VelocityJointInterface</hardwareInterface>
    </joint>
  </transmission>
  </xacro:macro>

  <xacro:wheels prefix="left" reflect="1" />
  <xacro:wheels prefix="right" reflect="-1" />

<!-- add the top part to the robot -->
  <link name="base_back">
    <visual>
      <geometry>
        <box size="0.01 0.3 0.2"/>
      </geometry>
      <origin xyz="-0.245 0 0.25" rpy="0 0 0"/>
    </visual>
    <collision>
     <geometry>
        <box size="0.01 0.3 0.2"/>
      </geometry>
      <origin xyz="-0.245 0 0.25" rpy="0 0 0"/>
    </collision>
    <xacro:default_inertial mass="1"/>
  </link>
  <joint name="base_back_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_back"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>

  <link name="base_top">
    <visual>
      <geometry>
        <box size="${base_xy} ${base_xy} ${t_base_z}"/>
      </geometry>
      <origin xyz="0 0 0.6" rpy="0 0 0"/>
      <material name="blue"/>
    </visual>
    <collision>
      <geometry>
        <box size="${base_xy} ${base_xy} ${t_base_z}"/>
      </geometry>
      <origin xyz="0 0 0.6" rpy="0 0 0"/>
    </collision>
    <xacro:cuboid_inertial mass="${base_mass}" height="${t_base_z}"/>
  </link>
  <joint name="base_top_joint" type="fixed">
    <parent link="base_back"/>
    <child link="base_top"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>

  <!-- Gazebo plugin for ROS Control -->
  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/</robotNamespace>
    </plugin>
  </gazebo>

</robot>
